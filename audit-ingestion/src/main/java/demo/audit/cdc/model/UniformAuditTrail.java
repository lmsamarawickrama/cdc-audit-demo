/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package demo.audit.cdc.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UniformAuditTrail extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6035146031599591294L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UniformAuditTrail\",\"namespace\":\"demo.audit.cdc.model\",\"fields\":[{\"name\":\"aggregateType\",\"type\":\"string\"},{\"name\":\"aggregateId\",\"type\":\"long\"},{\"name\":\"objectId\",\"type\":\"long\"},{\"name\":\"operation\",\"type\":\"string\"},{\"name\":\"oldValue\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"string\"],\"default\":{}}},{\"name\":\"newValue\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"string\"],\"default\":{}}},{\"name\":\"modifiedBy\",\"type\":\"string\"},{\"name\":\"tableName\",\"type\":\"string\"},{\"name\":\"correlationId\",\"type\":\"string\"},{\"name\":\"deduplicationId\",\"type\":\"string\"},{\"name\":\"auditDate\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UniformAuditTrail> ENCODER =
      new BinaryMessageEncoder<UniformAuditTrail>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UniformAuditTrail> DECODER =
      new BinaryMessageDecoder<UniformAuditTrail>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UniformAuditTrail> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UniformAuditTrail> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UniformAuditTrail> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UniformAuditTrail>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UniformAuditTrail to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UniformAuditTrail from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UniformAuditTrail instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UniformAuditTrail fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence aggregateType;
   private long aggregateId;
   private long objectId;
   private java.lang.CharSequence operation;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> oldValue;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> newValue;
   private java.lang.CharSequence modifiedBy;
   private java.lang.CharSequence tableName;
   private java.lang.CharSequence correlationId;
   private java.lang.CharSequence deduplicationId;
   private java.lang.CharSequence auditDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UniformAuditTrail() {}

  /**
   * All-args constructor.
   * @param aggregateType The new value for aggregateType
   * @param aggregateId The new value for aggregateId
   * @param objectId The new value for objectId
   * @param operation The new value for operation
   * @param oldValue The new value for oldValue
   * @param newValue The new value for newValue
   * @param modifiedBy The new value for modifiedBy
   * @param tableName The new value for tableName
   * @param correlationId The new value for correlationId
   * @param deduplicationId The new value for deduplicationId
   * @param auditDate The new value for auditDate
   */
  public UniformAuditTrail(java.lang.CharSequence aggregateType, java.lang.Long aggregateId, java.lang.Long objectId, java.lang.CharSequence operation, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> oldValue, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> newValue, java.lang.CharSequence modifiedBy, java.lang.CharSequence tableName, java.lang.CharSequence correlationId, java.lang.CharSequence deduplicationId, java.lang.CharSequence auditDate) {
    this.aggregateType = aggregateType;
    this.aggregateId = aggregateId;
    this.objectId = objectId;
    this.operation = operation;
    this.oldValue = oldValue;
    this.newValue = newValue;
    this.modifiedBy = modifiedBy;
    this.tableName = tableName;
    this.correlationId = correlationId;
    this.deduplicationId = deduplicationId;
    this.auditDate = auditDate;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return aggregateType;
    case 1: return aggregateId;
    case 2: return objectId;
    case 3: return operation;
    case 4: return oldValue;
    case 5: return newValue;
    case 6: return modifiedBy;
    case 7: return tableName;
    case 8: return correlationId;
    case 9: return deduplicationId;
    case 10: return auditDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: aggregateType = (java.lang.CharSequence)value$; break;
    case 1: aggregateId = (java.lang.Long)value$; break;
    case 2: objectId = (java.lang.Long)value$; break;
    case 3: operation = (java.lang.CharSequence)value$; break;
    case 4: oldValue = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 5: newValue = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 6: modifiedBy = (java.lang.CharSequence)value$; break;
    case 7: tableName = (java.lang.CharSequence)value$; break;
    case 8: correlationId = (java.lang.CharSequence)value$; break;
    case 9: deduplicationId = (java.lang.CharSequence)value$; break;
    case 10: auditDate = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'aggregateType' field.
   * @return The value of the 'aggregateType' field.
   */
  public java.lang.CharSequence getAggregateType() {
    return aggregateType;
  }


  /**
   * Sets the value of the 'aggregateType' field.
   * @param value the value to set.
   */
  public void setAggregateType(java.lang.CharSequence value) {
    this.aggregateType = value;
  }

  /**
   * Gets the value of the 'aggregateId' field.
   * @return The value of the 'aggregateId' field.
   */
  public long getAggregateId() {
    return aggregateId;
  }


  /**
   * Sets the value of the 'aggregateId' field.
   * @param value the value to set.
   */
  public void setAggregateId(long value) {
    this.aggregateId = value;
  }

  /**
   * Gets the value of the 'objectId' field.
   * @return The value of the 'objectId' field.
   */
  public long getObjectId() {
    return objectId;
  }


  /**
   * Sets the value of the 'objectId' field.
   * @param value the value to set.
   */
  public void setObjectId(long value) {
    this.objectId = value;
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public java.lang.CharSequence getOperation() {
    return operation;
  }


  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(java.lang.CharSequence value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'oldValue' field.
   * @return The value of the 'oldValue' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getOldValue() {
    return oldValue;
  }


  /**
   * Sets the value of the 'oldValue' field.
   * @param value the value to set.
   */
  public void setOldValue(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.oldValue = value;
  }

  /**
   * Gets the value of the 'newValue' field.
   * @return The value of the 'newValue' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getNewValue() {
    return newValue;
  }


  /**
   * Sets the value of the 'newValue' field.
   * @param value the value to set.
   */
  public void setNewValue(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.newValue = value;
  }

  /**
   * Gets the value of the 'modifiedBy' field.
   * @return The value of the 'modifiedBy' field.
   */
  public java.lang.CharSequence getModifiedBy() {
    return modifiedBy;
  }


  /**
   * Sets the value of the 'modifiedBy' field.
   * @param value the value to set.
   */
  public void setModifiedBy(java.lang.CharSequence value) {
    this.modifiedBy = value;
  }

  /**
   * Gets the value of the 'tableName' field.
   * @return The value of the 'tableName' field.
   */
  public java.lang.CharSequence getTableName() {
    return tableName;
  }


  /**
   * Sets the value of the 'tableName' field.
   * @param value the value to set.
   */
  public void setTableName(java.lang.CharSequence value) {
    this.tableName = value;
  }

  /**
   * Gets the value of the 'correlationId' field.
   * @return The value of the 'correlationId' field.
   */
  public java.lang.CharSequence getCorrelationId() {
    return correlationId;
  }


  /**
   * Sets the value of the 'correlationId' field.
   * @param value the value to set.
   */
  public void setCorrelationId(java.lang.CharSequence value) {
    this.correlationId = value;
  }

  /**
   * Gets the value of the 'deduplicationId' field.
   * @return The value of the 'deduplicationId' field.
   */
  public java.lang.CharSequence getDeduplicationId() {
    return deduplicationId;
  }


  /**
   * Sets the value of the 'deduplicationId' field.
   * @param value the value to set.
   */
  public void setDeduplicationId(java.lang.CharSequence value) {
    this.deduplicationId = value;
  }

  /**
   * Gets the value of the 'auditDate' field.
   * @return The value of the 'auditDate' field.
   */
  public java.lang.CharSequence getAuditDate() {
    return auditDate;
  }


  /**
   * Sets the value of the 'auditDate' field.
   * @param value the value to set.
   */
  public void setAuditDate(java.lang.CharSequence value) {
    this.auditDate = value;
  }

  /**
   * Creates a new UniformAuditTrail RecordBuilder.
   * @return A new UniformAuditTrail RecordBuilder
   */
  public static demo.audit.cdc.model.UniformAuditTrail.Builder newBuilder() {
    return new demo.audit.cdc.model.UniformAuditTrail.Builder();
  }

  /**
   * Creates a new UniformAuditTrail RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UniformAuditTrail RecordBuilder
   */
  public static demo.audit.cdc.model.UniformAuditTrail.Builder newBuilder(demo.audit.cdc.model.UniformAuditTrail.Builder other) {
    if (other == null) {
      return new demo.audit.cdc.model.UniformAuditTrail.Builder();
    } else {
      return new demo.audit.cdc.model.UniformAuditTrail.Builder(other);
    }
  }

  /**
   * Creates a new UniformAuditTrail RecordBuilder by copying an existing UniformAuditTrail instance.
   * @param other The existing instance to copy.
   * @return A new UniformAuditTrail RecordBuilder
   */
  public static demo.audit.cdc.model.UniformAuditTrail.Builder newBuilder(demo.audit.cdc.model.UniformAuditTrail other) {
    if (other == null) {
      return new demo.audit.cdc.model.UniformAuditTrail.Builder();
    } else {
      return new demo.audit.cdc.model.UniformAuditTrail.Builder(other);
    }
  }

  /**
   * RecordBuilder for UniformAuditTrail instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UniformAuditTrail>
    implements org.apache.avro.data.RecordBuilder<UniformAuditTrail> {

    private java.lang.CharSequence aggregateType;
    private long aggregateId;
    private long objectId;
    private java.lang.CharSequence operation;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> oldValue;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> newValue;
    private java.lang.CharSequence modifiedBy;
    private java.lang.CharSequence tableName;
    private java.lang.CharSequence correlationId;
    private java.lang.CharSequence deduplicationId;
    private java.lang.CharSequence auditDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(demo.audit.cdc.model.UniformAuditTrail.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.aggregateType)) {
        this.aggregateType = data().deepCopy(fields()[0].schema(), other.aggregateType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.aggregateId)) {
        this.aggregateId = data().deepCopy(fields()[1].schema(), other.aggregateId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.objectId)) {
        this.objectId = data().deepCopy(fields()[2].schema(), other.objectId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.operation)) {
        this.operation = data().deepCopy(fields()[3].schema(), other.operation);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.oldValue)) {
        this.oldValue = data().deepCopy(fields()[4].schema(), other.oldValue);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.newValue)) {
        this.newValue = data().deepCopy(fields()[5].schema(), other.newValue);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.modifiedBy)) {
        this.modifiedBy = data().deepCopy(fields()[6].schema(), other.modifiedBy);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.tableName)) {
        this.tableName = data().deepCopy(fields()[7].schema(), other.tableName);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[8].schema(), other.correlationId);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.deduplicationId)) {
        this.deduplicationId = data().deepCopy(fields()[9].schema(), other.deduplicationId);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.auditDate)) {
        this.auditDate = data().deepCopy(fields()[10].schema(), other.auditDate);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing UniformAuditTrail instance
     * @param other The existing instance to copy.
     */
    private Builder(demo.audit.cdc.model.UniformAuditTrail other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.aggregateType)) {
        this.aggregateType = data().deepCopy(fields()[0].schema(), other.aggregateType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aggregateId)) {
        this.aggregateId = data().deepCopy(fields()[1].schema(), other.aggregateId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.objectId)) {
        this.objectId = data().deepCopy(fields()[2].schema(), other.objectId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.operation)) {
        this.operation = data().deepCopy(fields()[3].schema(), other.operation);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.oldValue)) {
        this.oldValue = data().deepCopy(fields()[4].schema(), other.oldValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.newValue)) {
        this.newValue = data().deepCopy(fields()[5].schema(), other.newValue);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.modifiedBy)) {
        this.modifiedBy = data().deepCopy(fields()[6].schema(), other.modifiedBy);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.tableName)) {
        this.tableName = data().deepCopy(fields()[7].schema(), other.tableName);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[8].schema(), other.correlationId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.deduplicationId)) {
        this.deduplicationId = data().deepCopy(fields()[9].schema(), other.deduplicationId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.auditDate)) {
        this.auditDate = data().deepCopy(fields()[10].schema(), other.auditDate);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'aggregateType' field.
      * @return The value.
      */
    public java.lang.CharSequence getAggregateType() {
      return aggregateType;
    }


    /**
      * Sets the value of the 'aggregateType' field.
      * @param value The value of 'aggregateType'.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder setAggregateType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.aggregateType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'aggregateType' field has been set.
      * @return True if the 'aggregateType' field has been set, false otherwise.
      */
    public boolean hasAggregateType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'aggregateType' field.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder clearAggregateType() {
      aggregateType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'aggregateId' field.
      * @return The value.
      */
    public long getAggregateId() {
      return aggregateId;
    }


    /**
      * Sets the value of the 'aggregateId' field.
      * @param value The value of 'aggregateId'.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder setAggregateId(long value) {
      validate(fields()[1], value);
      this.aggregateId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'aggregateId' field has been set.
      * @return True if the 'aggregateId' field has been set, false otherwise.
      */
    public boolean hasAggregateId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'aggregateId' field.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder clearAggregateId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'objectId' field.
      * @return The value.
      */
    public long getObjectId() {
      return objectId;
    }


    /**
      * Sets the value of the 'objectId' field.
      * @param value The value of 'objectId'.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder setObjectId(long value) {
      validate(fields()[2], value);
      this.objectId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'objectId' field has been set.
      * @return True if the 'objectId' field has been set, false otherwise.
      */
    public boolean hasObjectId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'objectId' field.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder clearObjectId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public java.lang.CharSequence getOperation() {
      return operation;
    }


    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder setOperation(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.operation = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'oldValue' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getOldValue() {
      return oldValue;
    }


    /**
      * Sets the value of the 'oldValue' field.
      * @param value The value of 'oldValue'.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder setOldValue(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.oldValue = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'oldValue' field has been set.
      * @return True if the 'oldValue' field has been set, false otherwise.
      */
    public boolean hasOldValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'oldValue' field.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder clearOldValue() {
      oldValue = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'newValue' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getNewValue() {
      return newValue;
    }


    /**
      * Sets the value of the 'newValue' field.
      * @param value The value of 'newValue'.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder setNewValue(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.newValue = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'newValue' field has been set.
      * @return True if the 'newValue' field has been set, false otherwise.
      */
    public boolean hasNewValue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'newValue' field.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder clearNewValue() {
      newValue = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'modifiedBy' field.
      * @return The value.
      */
    public java.lang.CharSequence getModifiedBy() {
      return modifiedBy;
    }


    /**
      * Sets the value of the 'modifiedBy' field.
      * @param value The value of 'modifiedBy'.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder setModifiedBy(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.modifiedBy = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'modifiedBy' field has been set.
      * @return True if the 'modifiedBy' field has been set, false otherwise.
      */
    public boolean hasModifiedBy() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'modifiedBy' field.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder clearModifiedBy() {
      modifiedBy = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'tableName' field.
      * @return The value.
      */
    public java.lang.CharSequence getTableName() {
      return tableName;
    }


    /**
      * Sets the value of the 'tableName' field.
      * @param value The value of 'tableName'.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder setTableName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.tableName = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'tableName' field has been set.
      * @return True if the 'tableName' field has been set, false otherwise.
      */
    public boolean hasTableName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'tableName' field.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder clearTableName() {
      tableName = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'correlationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCorrelationId() {
      return correlationId;
    }


    /**
      * Sets the value of the 'correlationId' field.
      * @param value The value of 'correlationId'.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder setCorrelationId(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.correlationId = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'correlationId' field has been set.
      * @return True if the 'correlationId' field has been set, false otherwise.
      */
    public boolean hasCorrelationId() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'correlationId' field.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder clearCorrelationId() {
      correlationId = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'deduplicationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeduplicationId() {
      return deduplicationId;
    }


    /**
      * Sets the value of the 'deduplicationId' field.
      * @param value The value of 'deduplicationId'.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder setDeduplicationId(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.deduplicationId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'deduplicationId' field has been set.
      * @return True if the 'deduplicationId' field has been set, false otherwise.
      */
    public boolean hasDeduplicationId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'deduplicationId' field.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder clearDeduplicationId() {
      deduplicationId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'auditDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getAuditDate() {
      return auditDate;
    }


    /**
      * Sets the value of the 'auditDate' field.
      * @param value The value of 'auditDate'.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder setAuditDate(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.auditDate = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'auditDate' field has been set.
      * @return True if the 'auditDate' field has been set, false otherwise.
      */
    public boolean hasAuditDate() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'auditDate' field.
      * @return This builder.
      */
    public demo.audit.cdc.model.UniformAuditTrail.Builder clearAuditDate() {
      auditDate = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UniformAuditTrail build() {
      try {
        UniformAuditTrail record = new UniformAuditTrail();
        record.aggregateType = fieldSetFlags()[0] ? this.aggregateType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.aggregateId = fieldSetFlags()[1] ? this.aggregateId : (java.lang.Long) defaultValue(fields()[1]);
        record.objectId = fieldSetFlags()[2] ? this.objectId : (java.lang.Long) defaultValue(fields()[2]);
        record.operation = fieldSetFlags()[3] ? this.operation : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.oldValue = fieldSetFlags()[4] ? this.oldValue : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[4]);
        record.newValue = fieldSetFlags()[5] ? this.newValue : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[5]);
        record.modifiedBy = fieldSetFlags()[6] ? this.modifiedBy : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.tableName = fieldSetFlags()[7] ? this.tableName : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.correlationId = fieldSetFlags()[8] ? this.correlationId : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.deduplicationId = fieldSetFlags()[9] ? this.deduplicationId : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.auditDate = fieldSetFlags()[10] ? this.auditDate : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UniformAuditTrail>
    WRITER$ = (org.apache.avro.io.DatumWriter<UniformAuditTrail>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UniformAuditTrail>
    READER$ = (org.apache.avro.io.DatumReader<UniformAuditTrail>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.aggregateType);

    out.writeLong(this.aggregateId);

    out.writeLong(this.objectId);

    out.writeString(this.operation);

    long size0 = this.oldValue.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e0: this.oldValue.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.CharSequence v0 = e0.getValue();
      if (v0 == null) {
        out.writeIndex(0);
        out.writeNull();
      } else {
        out.writeIndex(1);
        out.writeString(v0);
      }
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.newValue.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e1: this.newValue.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.lang.CharSequence v1 = e1.getValue();
      if (v1 == null) {
        out.writeIndex(0);
        out.writeNull();
      } else {
        out.writeIndex(1);
        out.writeString(v1);
      }
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    out.writeString(this.modifiedBy);

    out.writeString(this.tableName);

    out.writeString(this.correlationId);

    out.writeString(this.deduplicationId);

    out.writeString(this.auditDate);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.aggregateType = in.readString(this.aggregateType instanceof Utf8 ? (Utf8)this.aggregateType : null);

      this.aggregateId = in.readLong();

      this.objectId = in.readLong();

      this.operation = in.readString(this.operation instanceof Utf8 ? (Utf8)this.operation : null);

      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.oldValue; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
        this.oldValue = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
          java.lang.CharSequence v0 = null;
          if (in.readIndex() != 1) {
            in.readNull();
            v0 = null;
          } else {
            v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
          }
          m0.put(k0, v0);
        }
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.newValue; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size1);
        this.newValue = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence k1 = null;
          k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
          java.lang.CharSequence v1 = null;
          if (in.readIndex() != 1) {
            in.readNull();
            v1 = null;
          } else {
            v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
          }
          m1.put(k1, v1);
        }
      }

      this.modifiedBy = in.readString(this.modifiedBy instanceof Utf8 ? (Utf8)this.modifiedBy : null);

      this.tableName = in.readString(this.tableName instanceof Utf8 ? (Utf8)this.tableName : null);

      this.correlationId = in.readString(this.correlationId instanceof Utf8 ? (Utf8)this.correlationId : null);

      this.deduplicationId = in.readString(this.deduplicationId instanceof Utf8 ? (Utf8)this.deduplicationId : null);

      this.auditDate = in.readString(this.auditDate instanceof Utf8 ? (Utf8)this.auditDate : null);

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.aggregateType = in.readString(this.aggregateType instanceof Utf8 ? (Utf8)this.aggregateType : null);
          break;

        case 1:
          this.aggregateId = in.readLong();
          break;

        case 2:
          this.objectId = in.readLong();
          break;

        case 3:
          this.operation = in.readString(this.operation instanceof Utf8 ? (Utf8)this.operation : null);
          break;

        case 4:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.oldValue; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
            this.oldValue = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence k0 = null;
              k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
              java.lang.CharSequence v0 = null;
              if (in.readIndex() != 1) {
                in.readNull();
                v0 = null;
              } else {
                v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
              }
              m0.put(k0, v0);
            }
          }
          break;

        case 5:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.newValue; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size1);
            this.newValue = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence k1 = null;
              k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
              java.lang.CharSequence v1 = null;
              if (in.readIndex() != 1) {
                in.readNull();
                v1 = null;
              } else {
                v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
              }
              m1.put(k1, v1);
            }
          }
          break;

        case 6:
          this.modifiedBy = in.readString(this.modifiedBy instanceof Utf8 ? (Utf8)this.modifiedBy : null);
          break;

        case 7:
          this.tableName = in.readString(this.tableName instanceof Utf8 ? (Utf8)this.tableName : null);
          break;

        case 8:
          this.correlationId = in.readString(this.correlationId instanceof Utf8 ? (Utf8)this.correlationId : null);
          break;

        case 9:
          this.deduplicationId = in.readString(this.deduplicationId instanceof Utf8 ? (Utf8)this.deduplicationId : null);
          break;

        case 10:
          this.auditDate = in.readString(this.auditDate instanceof Utf8 ? (Utf8)this.auditDate : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










